#!/bin/bash

set -e

prog="$(basename $0)"
cd "$(dirname $0)"

source ./env

usage() {
    cat <<EOF

Usage: $prog <command>

EOF
    exit 2
}

lfs-init() {
    set -x
    bash -c "source ./env ; env | grep -e '^lfs_'" > eval.env

    podman stop -t 0    lfs-$stage || true
    podman rm -f        lfs-$stage || true

    podman build \
        --tag       lfs-$stage \
        containers/lfs-$stage
    podman create \
        --name      lfs-$stage \
        --hostname  lfs-$stage \
        --env-file  eval.env \
        --userns    keep-id \
        --volume    "./build/sources:/home/lfs/rpmbuild/SOURCES:z" \
        --volume    "./build/stages/${stage}/rpms:/home/lfs/rpmbuild/RPMS:z" \
        --volume    "./build/stages/${stage}/srpms:/home/lfs/rpmbuild/SRPMS:z" \
        --volume    .:/home/lfs/lfs-rpm:z \
        lfs-$stage
    podman start    lfs-$stage
}

lfs-download() {
    set -x
    specs="$(ls specs/*.spec | sort)"
    for spec in $specs; do
        spectool -d 'with_lfs_gcc_bootstrap 1' -g -C build/sources $spec
    done
}

lfs-build() {
    set -x
    method=$1
    packages=$2
    [ -z "$packages" ] && packages="$(cat containers/lfs-$stage/$stage.pkg.txt)"
    for package in $packages; do
        if [ -n "$2" ] || ! podman exec lfs-$stage rpm -q $package ; then
            echo -e "\n----- building $stage:$package"
            podman exec lfs-$stage rpmbuild $rpmbuild_flags lfs-rpm/specs/${package}.spec
            podman exec --user root lfs-$stage rpm $method $rpm_flags rpmbuild/RPMS/$lfs_arch/${package}-*.rpm
        fi
    done
}

lfs-export() {
    set -x
    case $stage in
        stage1a)
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /tmp/lfs-${stage}.tar.gz  .
            podman cp lfs-${stage}:/tmp/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            ;;
        *)
            echo "export not defined for $stage"
            exit 1
            ;;
    esac
}

mkdir -p build/{sources,stages}

for mkstage in stage1a stage1b stage1c stage2; do
    mkdir -p build/stages/$mkstage/{rpms,srpms}
done

if [ "$with_check" != "1" ] ; then
    rpm_nocheck="--nocheck"
fi

case $1 in
    stage1a|1a)
        shift
        stage=stage1a
        next_stage=stage1b
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
    stage1b|1b)
        shift
        stage=stage1b
        next_stage=stage1c
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
esac


case $1 in
    download)   lfs-download ;;
    init)       lfs-init ;;
    build)      lfs-build --install ;;
    rpm)        lfs-build --reinstall $2 ;;
    shell)      exec podman exec -it lfs-$stage /bin/bash ;;
    root)       exec podman exec --user root -it lfs-$stage /bin/bash ;;
    export)     lfs-export ;;
    *)
        echo "$prog: error: invalid command" 1>&2
        usage
        ;;
esac

