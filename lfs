#!/bin/bash

set -e

prog="$(basename $0)"
cd "$(dirname $0)"

source ./env

usage() {
    cat <<EOF

Usage: $prog <command>

EOF
    exit 2
}

all_stages="stage1a stage1b stage1c stage2"

assert-stage() {
    if [ -z "$stage" ] ; then
        echo "$prog: error: stage name should preceed command"
        exit 1
    fi
}

lfs-env() {
    env | grep -e "^lfs_" | sort
}

lfs-init() {
    if [ "$stage" == "stage1a" ] ; then
        build_arg="--build-arg lfs_host_image=${lfs_host_image}"
    fi

    set -x
    bash -c "source ./env ; env | grep -e '^lfs_'" > eval.env

    podman stop -t 0    lfs-$stage || true
    podman rm -f        lfs-$stage || true

    podman build --tag lfs-$stage $build_arg containers/lfs-$stage
    podman create \
        --name      lfs-$stage \
        --hostname  lfs-$stage \
        --env-file  eval.env \
        --userns    keep-id \
        --volume    "./build/sources:/home/lfs/rpmbuild/SOURCES:z" \
        --volume    "./build/${stage}/rpms:/home/lfs/rpmbuild/RPMS:z" \
        --volume    "./build/${stage}/srpms:/home/lfs/rpmbuild/SRPMS:z" \
        --volume    .:/home/lfs/lfs-rpm:z \
        lfs-$stage
    podman start lfs-$stage
}

lfs-download() {
    specs="$(ls specs/*.spec | grep -v '#' | sort)"
    for spec in $specs; do
        (
        set -x
        spectool -d "with_lfs_gcc_bootstrap 1" -d "lfs_version ${lfs_version}" -g -C build/sources $spec
        )
    done
}

lfs-build() {
    method=$1
    packages=$2
    [ -z "$packages" ] && packages="$(cat containers/lfs-$stage/$stage.pkg.txt)"
    for package in $packages; do
        spec=$package
        if [ "$package" == "gcc#libstdc++" ]; then
            package=libstdc++
            spec=gcc
            local rpmbuild_pkg_flags="--with lfs_gcc_libstdcpp_only"
        fi
        if [ "$package" == "gcc" ] && [ "$stage" == "stage1b" ] ; then
            local rpm_pkg_flags="--replacefiles"
        fi
        if [ -n "$2" ] || ! podman exec lfs-$stage rpm -q $package ; then
            echo -e "\n----- building $stage:$package"
            ( set -x
            podman exec lfs-$stage rpmbuild \
                $rpmbuild_flags \
                $rpmbuild_pkg_flags \
                lfs-rpm/specs/${spec}.spec
            podman exec --user root lfs-$stage rpm \
                $method \
                $rpm_flags \
                $rpm_pkg_flags \
                rpmbuild/RPMS/$lfs_arch/${package}-*.rpm
            )
        fi
    done
}

lfs-export() {
    case $stage in
        stage1a)
            (
            set -x
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /tmp/lfs-${stage}.tar.gz  .
            podman cp lfs-${stage}:/tmp/lfs-${stage}.tar.gz build/${stage}
            cp build/${stage}/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage1b)
            (
            set -x
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /tmp/lfs-${stage}.tar.gz --exclude=./tools .
            podman cp lfs-${stage}:/tmp/lfs-${stage}.tar.gz build/${stage}
            cp build/${stage}/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        *)
            echo "export not defined for $stage"
            exit 1
            ;;
    esac
}

lfs-dist-clean() {
    set -x
    rm -rf build
    rm -rf containers/*/*.tar.gz
    rm -f eval.env
    podman stop --time 0 --ignore   $all_stages || true
    podman rmi --force              $all_stages || true
}

lfs-build-all() {
    ./lfs download
    ./lfs 1a init
    ./lfs 1a build
    ./lfs 1a export
    ./lfs 1b init
    ./lfs 1b build
}

mkdir -p build/sources

for mkstage in stage1a stage1b stage1c stage2; do
    mkdir -p build/$mkstage/{rpms,srpms}
done

if [ "$with_check" != "1" ] ; then
    rpm_nocheck="--nocheck"
fi

case $1 in
    stage1a|1a)
        shift
        stage=stage1a
        next_stage=stage1b
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
    stage1b|1b)
        shift
        stage=stage1b
        next_stage=stage1c
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
esac


case $1 in
    env)        lfs-env ;;
    download)   lfs-download ;;
    init)       assert-stage && lfs-init ;;
    build)      assert-stage && lfs-build --install ;;
    rpm)        assert-stage &&lfs-build --reinstall $2 ;;
    shell)      assert-stage && exec podman exec -it lfs-$stage /bin/bash ;;
    root)       assert-stage && exec podman exec --user root -it lfs-$stage /bin/bash ;;
    export)     assert-stage && lfs-export ;;
    dist-clean) lfs-dist-clean ;;
    build-all)  lfs-build-all ;;
    *)
        echo "$prog: error: invalid command" 1>&2
        usage
        ;;
esac

