#!/bin/bash

set -e

prog="$(basename $0)"
cd "$(dirname $0)"

source ./env

usage() {
    cat <<EOF

Usage: $prog <command>

EOF
    exit 2
}

assert-stage() {
    if [ -z "$stage" ] ; then
        echo "$prog: error: stage name should preceed command"
        exit 1
    fi
}

timestamp() {
    date +"%Y-%m-%d %H:%m:%S"
}

lfs-env() {
    env | grep -e "^lfs_" | sort
}

lfs-init() {
    if [ "$stage" == "stage1a" ] ; then
        build_arg="--build-arg lfs_host_image=${lfs_host_image}"
    fi

    set -x
    bash -c "source ./env ; env | grep -e '^lfs_'" > eval.env

    podman stop -t 0    lfs-$stage || true
    podman rm -f        lfs-$stage || true

    podman build --tag lfs-$stage $build_arg containers/lfs-$stage
    podman create \
        --name      lfs-$stage \
        --hostname  lfs-$stage \
        --env-file  eval.env \
        --userns    keep-id \
        --volume    "./build/sources:/home/lfs/rpmbuild/SOURCES:z" \
        --volume    "./build/${stage}/rpms:/home/lfs/rpmbuild/RPMS:z" \
        --volume    "./build/${stage}/srpms:/home/lfs/rpmbuild/SRPMS:z" \
        --volume    .:/home/lfs/lfs-rpm:z \
        lfs-$stage
    podman start lfs-$stage
}

lfs-spectool() {
    ( 
    set -x
    spectool -d "with_lfs_gcc_bootstrap 1" -d "lfs_version ${lfs_version}" -g -C build/sources $1
    )
}

lfs-download() {
    specs=$@ 
    [ -z "$specs" ] && specs="$(ls specs/*.spec | grep -v '#' | sort)"
    for spec in $specs; do
        lfs-spectool $spec
    done
}

lfs-build() {
    method=$1
    shift 
    specs=$@

    [ -z "$specs" ] && specs="$(cat containers/lfs-$stage/$stage.pkg.txt)"
    echo "" >> build/logs/build.log
    
    for spec in $specs; do
        if [ ! -f "$spec" ] ; then 
            echo "$prog: error: $spec: file not found" 
            continue 
        fi 
        package=$(basename "$spec" .spec)
        if [ "$package" == "libstdc++" ]; then
            rpmbuild_pkg_flags="--with lfs_gcc_libstdcpp_only"
        elif [ "$package" == "gcc" ] && [ "$stage" == "stage1b" ] ; then
            rpm_pkg_flags="--replacefiles"
        fi

        if [ -n "$@" ] || ! podman exec lfs-$stage rpm -q $package ; then
            lfs-spectool "$spec" 
            echo "$stage:$package" > build/logs/last-started
            echo "[$(timestamp)] start $stage:$package" >> build/logs/build.log
            echo -e "\n----- building $stage:$package"
            ( set -e -x
            podman exec lfs-$stage rpmbuild \
                $rpmbuild_flags \
                $rpmbuild_pkg_flags \
                lfs-rpm/${spec} 2>&1 \
                | tee build/logs/${stage}/${package}.log  
            podman exec --user root lfs-$stage rpm \
                $method \
                $rpm_flags \
                $rpm_pkg_flags \
                rpmbuild/RPMS/$lfs_arch/${package}-*.rpm
            )
            echo "$stage:$package" > build/logs/last-success
            echo "[$(timestamp)] done  $stage:$package" >> build/logs/build.log
        fi
    done
}

lfs-export() {
    case $stage in
        stage1a)
            (
            set -x
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /tmp/lfs-${stage}.tar.gz  .
            podman cp lfs-${stage}:/tmp/lfs-${stage}.tar.gz build/${stage}
            cp build/${stage}/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage1b)
            (
            set -x
            podman exec --user root -t lfs-${stage} tar -C /lfs -c -z -f /tmp/lfs-${stage}.tar.gz --exclude=./tools .
            podman cp lfs-${stage}:/tmp/lfs-${stage}.tar.gz build/${stage}
            cp build/${stage}/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage1c)
            (
            set -x 
            podman exec --user root -t lfs-$stage \
                tar -C / -c -z -f /tmp/lfs-$stage.tar.gz \
                --exclude='./tmp/*' \
                --exclude './home/lfs/*' \
                --exclude './root/*' \
                --exclude './dev/*' \
                --exclude './proc/*' \
                --exclude './sys/*' \
                --exclude './var/lib/rpm/*' \
                .
            podman cp lfs-$stage:/tmp/lfs-$stage.tar.gz build/${stage}
            cp build/${stage}/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        stage2)
            ( 
            set -x
            podman exec --user root -t lfs-$stage \
                tar -C / -c -z -f /tmp/lfs-$stage.tar.gz \
                --exclude='./tmp/*' \
                --exclude './home/*' \
                --exclude './root/*' \
                --exclude './dev/*' \
                --exclude './proc/*' \
                --exclude './sys/*' \
                .
            podman cp lfs-$stage:/tmp/lfs-$stage.tar.gz build/${stage}
            rm -rf build/boot
            podman cp "lfs-$stage:/boot" build/boot
            cp build/${stage}/lfs-${stage}.tar.gz containers/lfs-${next_stage}
            )
            ;;
        *)
            echo "export not defined for $stage"
            exit 1
            ;;
    esac
}

lfs-bootstrap() {
    if [ "$stage" == "stage1c" ] ; then
        podman exec --user root -t lfs-stage1c lfs-rpm/containers/lfs-stage1c/rpm-bootstrap.sh
    else
        echo "$prog: error: no bootstrap for this stage"
        exit 1
    fi
}

lfs-mkimage() {
    set -x 
    truncate -s ${lfs_root_size} ${lfs_root_img}
    sudo mkfs -t ext4 ${lfs_root_img}
    sudo mkdir -p /run/lfs 
    sudo mount ${lfs_root_img} /run/lfs 
    sudo tar xf build/stage2/lfs-stage2.tar.gz -C /run/lfs 
    sudo umount /run/lfs 
}

lfs-dist-clean() {
    local images="lfs-stage1a lfs-stage1b lfs-stage1c lfs-stage2 lfs-base"
    set -x
    rm -rf build
    rm -rf containers/*/*.tar.gz
    rm -f eval.env
    podman stop --time 0 --ignore   $images || true
    podman rmi --force              $images || true
}

lfs-boot() {
    exec qemu-system-x86_64 \
        -kernel build/boot/vmlinuz \
        -hda ${lfs_root_img} \
        -append "root=/dev/sda console=ttyS0" \
        -nographic
}

lfs-build-all() {
    ./lfs download

    ./lfs 1a init
    ./lfs 1a build
    ./lfs 1a export
    
    ./lfs 1b init
    ./lfs 1b build
    ./lfs 1b export
    
    ./lfs 1c init
    ./lfs 1c bootstrap
    ./lfs 1c build
    ./lfs 1c export
    
    ./lfs 2 init 
    ./lfs 2 build 
    ./lfs 2 export
}

mkdir -p build/{sources,logs}

for mkstage in stage1a stage1b stage1c stage2 base; do
    mkdir -p build/$mkstage/{rpms,srpms}
    mkdir -p build/logs/$mkstage
done

if [ "$with_check" != "1" ] ; then
    rpm_nocheck="--nocheck"
fi

case $1 in
    stage1a|1a)
        shift
        stage=stage1a
        next_stage=stage1b
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
    stage1b|1b)
        shift
        stage=stage1b
        next_stage=stage1c
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
    stage1c|1c)
        shift
        stage=stage1c
        next_stage=stage2
        rpmbuild_flags="-bb $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
    stage2|2)
        shift 
        stage=stage2
        next_stage=base 
        rpmbuild_flags="-ba $rpm_nocheck"
        rpm_flags="--nodeps"
        ;;
    base)
        shift
        stage=base 
        ;;
esac


case $1 in
    env)        lfs-env ;;
    download)   shift ; lfs-download $@ ;;
    init)       assert-stage && lfs-init ;;
    start)      assert-stage && podman start lfs-$stage ;; 
    stop)       assert-stage && podman stop --timeout 0 lfs-$stage ;;
    build)      assert-stage && lfs-build --install ;;
    rpm)        assert-stage && shift ; lfs-build --reinstall $@ ;;
    shell)      assert-stage && exec podman exec -it lfs-$stage /bin/bash ;;
    root)       assert-stage && exec podman exec --user root -it lfs-$stage /bin/bash ;;
    export)     assert-stage && lfs-export ;;
    bootstrap)  assert-stage && lfs-bootstrap ;;
    mkimage)    lfs-mkimage ;;
    boot)       lfs-boot ;;
    dist-clean) lfs-dist-clean ;;
    build-all)  lfs-build-all ;;
    *)
        echo "$prog: error: invalid command" 1>&2
        usage
        ;;
esac

